.menu {
  --spacing-x: 0.4em;
  --spacing-y: 0.4em;
  display: inline-grid;
  min-width: var(--min-width, 0);
  grid-template-columns:
    [spacer-left] var(--spacing-x)
    [control] auto
    [icon] auto
    [label] 1fr
    [spacer-right] var(--spacing-x);
  padding: var(--spacing-y) 0;

  .menu-heading {
    grid-column: 1 / -1;
    color: #444;
    font-size: 80%;
    padding: 0.2em 0;
  }

  .menu-divider {
    grid-column: 1 / -1;
    border-top: 0.1em solid #ccc;
    height: 0;
    margin: var(--spacing-y, 0.4em) 0;
  }

  /**
   * Tricky aspects of this CSS:
   *
   * We want to vertically align all the controls, icons, and labels, even if
   * the Menu doesn't consistently have a control or icon for all its MenuItems.
   * We're leveraging the power of CSS grid to horizontally position the
   * controls, icons, and labels so that they are in vertical alignment across
   * the entire Menu.
   *
   * This component would be an ideal use-case for sub-grid, but sub-grid is not
   * widely supported enough yet. So instead we're faking it by setting
   * `display: contents;` on `.menu-item`. We also want a row hover background,
   * but because of `display: contents;`, we need to set the hover background,
   * per cell instead of per row. Because the hover background is per-cell, we
   * can't use `gap` (or there would be gaps in the background). Foregoing `gap`
   * makes it harder to get consistent spacing between and around cells, which
   * is why we have the funky `padding` stuff and extra grid columns. I don't
   * like the extra grid columns. There may be a cleaner way to do this, but I
   * wasn't able to think of one quickly.
   */
  .menu-item {
    display: contents;
    cursor: pointer;

    &:not(.disabled):hover .cell {
      background-color: #f0f0f0;
    }
    &.disabled {
      color: #999;
      cursor: not-allowed;
    }
    .control {
      grid-column: control;
    }
    .icon {
      grid-column: icon;
    }
    .label {
      grid-column: label;
    }
    .cell:not(:empty) {
      padding: var(--spacing-y) var(--spacing-x);
    }
    .control,
    .icon {
      display: flex;
      align-items: center;
    }
    .cell.control {
      --checkbox-margin-bottom: 0;
    }
    .passthrough-button {
      background: inherit;
      border-radius: inherit;
      border: inherit;
      color: inherit;
      cursor: inherit;
      font-family: inherit;
      font-size: inherit;
      font-weight: inherit;
      text-align: inherit;
      margin: 0;
    }
  }
}
